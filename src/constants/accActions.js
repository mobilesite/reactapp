let target = {
  LOAD_ACCOUNTS: 'ACC_ACTION.LOAD_ACCOUNTS',
  NEW_ACCOUNT_CREATED_PENDING: 'ACC_ACTION.NEW_ACCOUNT_CREATED_PENDING',
  NEW_ACCOUNT_CREATED_FULFILLED: 'ACC_ACTION.NEW_ACCOUNT_CREATED_FULFILLED', 
  NEW_ACCOUNT_ADDED_PENDING: 'ACC_ACTION.NEW_ACCOUNT_ADDED_PENDING',
  NEW_ACCOUNT_ADDED_FULFILLED: 'ACC_ACTION.NEW_ACCOUNT_ADDED_FULFILLED',
  UPDATE_ACCOUNT_PENDING: 'ACC_ACTION.UPDATE_ACCOUNT_PENDING',
  UPDATE_ACCOUNT_FULFILLED: 'ACC_ACTION.UPDATE_ACCOUNT_FULFILLED',
  MODIFY_ACCOUNT: 'ACC_ACTION.MODIFY_ACCOUNT',
  ADD_DELETE_ACCOUNT: 'ACC_ACTION.ADD_DELETE_ACCOUNT',
  DELETE_ACCOUNT: 'ACC_ACTION.DELETE_ACCOUNT',
  INC_MANUAL_NONCE_ACCOUNT: 'ACC_ACTION.INC_MANUAL_NONCE_ACCOUNT',
  JOINING_KYBER_WALLET: 'ACC_ACTION.JOINING_KYBER_WALLET',
  JOINED_KYBER_WALLET: 'ACC_ACTION.JOINED_KYBER_WALLET',
  SORT_ACCOUNT_BY_FIELD: 'ACC_ACTION.SORT_ACCOUNT_BY_FIELD'
}
let handler = {
  get: (target, key) => {
    if (target.hasOwnProperty(key)) return target[key];
    else throw new Error(`Fired a wrong actionname: ${key}. Available Actions: ${Object.keys(target)}`);
  }
}
const proxy = new Proxy(target, handler)
export default proxy